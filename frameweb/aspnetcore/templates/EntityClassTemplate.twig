using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace {{ package.Name }}
{
	public class {{ class.Name }} : Entity
	{
	{# ATTRIBUTES #}
	{% for attribute in attributes %}
	    {% if attribute.isID() == true %}
		    [Key]
		    {{ attribute.Visibility.Name }} {{ attribute.Type.Name }} {{ attribute.Name }} { get; set; }
	    {% else %}
			{% if attribute.isIsNull() == false %}
				[Required]
			{% endif %}
			{% if (attribute.Size > 0) and (attribute.Type.Name == 'string') %}
				[StringLength({{ attribute.Size }})]
			{% endif %}
			{% if attribute.isUnique() == true %}
				// Adicione a regra UNIQUE via Fluent API
			{% endif %}
			{{ attribute.Visibility.Name }} {{ attribute.Type.Name }}{% if attribute.isIsNull() == true %}?{% endif %} {{ attribute.Name }} { get; set; }
	    {% endif %}
	{% endfor %}
	
	{# ASSOCIATIONS #}
	{% for association in associations %}
		{%- set sourceToTargetCardinality = association.SourceToTargetCardinality -%}
		{%- set targetToSourceCardinality = association.TargetToSourceCardinality -%}
		{%- set sourceTypeName = association.SourceMember.Type.Name %}
		{%- set targetTypeName = association.TargetMember.Type.Name %}
		{%- set sourceName = association.SourceMember.Name -%}
		{%- set targetName = association.TargetMember.Name -%}
		{%- set collection = (association.Collection == "list") ? 'IEnumerable' : (association.Collection | title) -%}
		
		{% if sourceTypeName == class.Name and targetTypeName == class.Name %}
			{% if sourceToTargetCardinality == "OneToMany" or sourceToTargetCardinality == "ManyToOne" %}
			    [ForeignKey("{{ sourceName }}Id")]
			    public {{ sourceTypeName }} {{ sourceName }} { get; set; }
			    public Guid? {{ sourceName }}Id { get; set; }
				
			    [InverseProperty("{{ sourceName }}")]
			    public {{ collection }}<{{ targetTypeName }}> {{ targetName }} { get; set; }	
			{% elseif sourceToTargetCardinality == "OneToOne" %}
				/* !!! Essa entidade contém uma relação 1..1 para si própria, o mapeamento dela
				deve ser feito através da Fluent API. */
				public {{ targetTypeName }} {{ targetName }} { get; set; }
				public Guid? {{ targetName }}Id { get; set; }
				
				public {{ sourceTypeName }} {{ sourceName }} { get; set; }
				public Guid? {{ sourceTypeName }}Id { get; set; }
			{% elseif sourceToTargetCardinality == "ManyToMany" %}
				/* Crie uma classe intermediária entre {{ sourceTypeName }} e {{ targetTypeName }} com as seguintes propriedades:
				[ForeignKey("{{ sourceTypeName }}SourceId")]
		        public {{ sourceTypeName }} {{ sourceTypeName }}Source { get; set; }
		        public Guid {{ sourceTypeName }}SourceId { get; set; }
		
		        [ForeignKey("{{ targetTypeName }}TargetId")]
		        public {{ targetTypeName }} {{ targetTypeName }}Target { get; set; }
		        public Guid {{ targetTypeName }}TargetId { get; set; }
				
				Por fim substitua o tipo Object abaixo */
				[InverseProperty("{{ sourceTypeName }}Source")]
				public {{ collection }}<Object> {{ targetName }} { get; set; }
				[InverseProperty("{{ targetTypeName }}Target")]
				public {{ collection }}<Object> {{ sourceName }} { get; set; }
			{% endif %}
			
		{% elseif sourceTypeName == class.Name %}
			{% if sourceToTargetCardinality == "OneToMany" %}
				[InverseProperty("{{ sourceName }}")]
				public {{ collection }}<{{ targetTypeName }}> {{ targetName }} { get; set; }
			{% elseif sourceToTargetCardinality == "ManyToOne" %}
				[ForeignKey("{{ targetName }}Id")]
				public {{ targetTypeName }} {{ targetName }} { get; set; }
				public Guid {{ targetName }}Id { get; set; }
			{% elseif sourceToTargetCardinality == "OneToOne" %}
				/* !!! Caso essa entidade contenha mais de uma relação 1..1 entre {{ targetTypeName }} e {{ sourceTypeName }},
				o mapeamento delas deve ser feito através da Fluent API. */
				public {{ targetTypeName }} {{ targetName }} { get; set; }
			{% elseif sourceToTargetCardinality == "ManyToMany" %}
				/* Crie uma classe intermediária entre {{ sourceTypeName }} e {{ targetTypeName }} com as seguintes propriedades:
				
				[ForeignKey("{{ sourceName }}Id")]
		        public {{ sourceTypeName }} {{ sourceName }} { get; set; }
		        public Guid {{ sourceName }}Id { get; set; }
		
		        [ForeignKey("{{ targetName }}Id")]
		        public {{ targetTypeName }} {{ targetName }} { get; set; }
		        public Guid {{ targetName }}Id { get; set; }
				
				Por fim substitua o tipo Object abaixo */
				[InverseProperty("{{ sourceName }}")]
				public {{ collection }}<Object> {{ targetName }} { get; set; }
			{% endif %}
		{% elseif targetTypeName == class.Name %}
			{% if targetToSourceCardinality == "OneToMany" %}
				[InverseProperty("{{ targetName }}")]
				public {{ collection }}<{{ sourceTypeName }}> {{ sourceName }} { get; set; }
			{% elseif targetToSourceCardinality == "ManyToOne" %}
				[ForeignKey("{{ sourceName }}Id")]
				public {{ sourceTypeName }} {{ sourceName }} { get; set; }
				public Guid {{ sourceName }}Id { get; set; }
			{% elseif sourceToTargetCardinality == "OneToOne" %}
				/* !!! Caso essa entidade contenha mais de uma relação 1..1 entre {{ targetTypeName }} e {{ sourceTypeName }},
				o mapeamento delas deve ser feito através da Fluent API. */
				[ForeignKey("{{ sourceName }}Id")]
				public {{ sourceTypeName }} {{ sourceName }} { get; set; }
				public Guid? {{ sourceName }}Id { get; set; }
			{% elseif sourceToTargetCardinality == "ManyToMany" %}
				/* Crie uma classe intermediária entre {{ sourceTypeName }} e {{ targetTypeName }} com as seguintes propriedades:
				
				[ForeignKey("{{ sourceName }}Id")]
		        public {{ sourceTypeName }} {{ sourceName }} { get; set; }
		        public Guid {{ sourceName }}Id { get; set; }
		
		        [ForeignKey("{{ targetName }}Id")]
		        public {{ targetTypeName }} {{ targetName }} { get; set; }
		        public Guid {{ targetName }}Id { get; set; }
				
				Por fim substitua o tipo Object abaixo*/
				[InverseProperty("{{ targetName }}")]
				public {{ collection }}<Object> {{ sourceName }} { get; set; }
			{% endif %}
		{% endif %}
	{% endfor %}
	
	{# METHODS #}
	{% for method in methods %}
		{% if method.isAbstract() %}
			{{ method.Visibility.Name }} abstract {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %});
		{% else %}
			{{ method.Visibility.Name }} {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %})
			{
				throw new NotImplementedException();
			}
		{% endif %}
	{% endfor %}
	}
}
